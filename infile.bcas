# @-accumulator is inside mega-alu
# $-cache is outside mega-alu

# @-registers inside mega-alu have built in SIMD ops which take effect over a range

# Have capabilities work on one byte granularity with swizzles

# Accum capabilities
accumallcaps = @                # assign full accumulator access capability
accumspecificpage = @01fh:      # assign a specific page capability
accumspecificreg = @020h:01h    # assign a specific register 01h from page 020h
accumrangereg = @020h:02h-04h   # assign a range of registers from page 020h
accumswizzle = @020h:05h-06h.st # assign a range of two most significant bytes from registers 05h
                                # and 06h in page 020h

# Cache capabilities
cacheallcaps = $                # assign full cache access capability
cachespecificpage = $008h:      # assign a specific page capability
cachepagerange = $009h-00bh:    # continous three-page range capability

# Examples of memory access...

# Examples of passing parameters when branching...

# Extension for allocation and virtual memory?
accumallocpagecap = @(1)        # assign a single allocated page capability - needs some method
                                # to check if allocation failed
accumallocpagerange = @(3)      # assign a range of three (3) allocated pages - needs some method
                                # to check if allocation failed
cacheallocpagerange = $(2)      # same as above, but allocating from cache - not accumulator.

# add constant to accumulator, then add from memory, using two's complement addition.
@.stuv + 100
@.stuv + cap.stuv

# With a pseudoinstruction you could potentially sum up a range of memory.

# subtract from accumulator
.stuv - 100
.stuv - cap.wxyz

# use swizzle to do subtraction on 16bit integers in accumulator
.stuvwxyz = cap2.stuvwxyz           # load 64bits (8byte) from memory to accumulator
= cap2.stuvwxyz                     # the exact same instruction as previous line
= cap2                              # the exact same instruction as previous line

.uv = .wx - yz                      # subtract .yz from .wx, store result in .uv

.st - .uv                           # subtract .uv from .st, store result in .st
.st = .st - .uv                     # the exact same instruction as the previous line,
                                    # but redundant verbose syntax

.uvwxyz = 0.uvwxyz                  # move zero register into .uvwxyz of accumulator,
                                    # keep .st of accumulator unchanged

cap2.stuvwxyz = .stuvwxyz           # store 64bits (8byte) to memory from accumulator
cap2.stuvwxyz =                     # the exact same instruction as previous line
cap2 =                              # the exact same instruction as previous line

# use bitfields to do subtraction on 32bit integers in memory


# use bitfields to set pixels in the tiler


# jump based on byte-swizzle specific carry-flag
.z + 256                            # set carry flag for .z
carry .z cap_code1                  # branch on carry flag set for .z

# jump based on byte-swizzle specific zero-flag
.s = 100
.s - 100                            # set zero flag for .s
zero .s cap_code2                   # branch on zero flag set for .s

# force a jump by explicitly setting overflow flag for .s in status register
.O or 10000000b                     # .NOBITZUC is the status register
over .s cap_code3